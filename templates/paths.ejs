// THIS FILE IS GENERATED BY CODE GENERATOR. DO NOT CHANGE MANUALLY.
/* tslint:disable */
/* eslint-disable */
var AJV = require('ajv');

var ajv = new AJV({
  unknownFormats: ['int32', 'float', 'int64'],
  nullable: true
});

var json = require('./schema.json');

var operationHash = Object.values(json.paths).reduce(function (acc, ac) {
  for (var _i = 0, _Object$values = Object.values(ac); _i < _Object$values.length; _i++) {
    var parseParameters = function parseParameters() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      return params.filter(function (param) {
        return param.in === 'query';
      }).reduce(function (_acc, _ac) {
        if (_ac.required) _acc.required.push(_ac.name);
        _acc.properties[_ac.name] = _ac.schema || {};
        return _acc;
      }, {
        "type": "object",
        "required": [],
        "properties": {}
      });
    };

    var operation = _Object$values[_i];
    var operationId = operation.operationId,
        responses = operation.responses,
        requestBody = operation.requestBody,
        parameters = operation.parameters;
    var targetResponse = responses['200'] || responses['201'];
    if (!targetResponse || !targetResponse.content) continue;
    var requestBodySchema = {};

    if (requestBody) {
      if (requestBody.content['application/json']) {
        requestBodySchema = requestBody.content['application/json'].schema;
      }

      if (requestBody.content['application/x-www-form-urlencoded']) {
        requestBodySchema = requestBody.content['application/x-www-form-urlencoded'].schema;
      }
    }

    acc[operationId] = {
      parameters: parseParameters(parameters),
      response: targetResponse.content['application/json'].schema,
      requestBody: requestBodySchema
    };
  }

  return acc;
}, {});

function validate(schema, data) {
  var valid = ajv.validate(schema, data);
  if (!valid) throw new Error(ajv.errorsText());
  return valid;
}

function validateParameters(operationId, data) {
  var operation = operationHash[operationId];
  var parameters = operation ? operation.parameters : {};
  return validate(parameters, data);
}

function validateResponse(operationId, data) {
  var operation = operationHash[operationId];
  var response = operation ? operation.response : {};
  return validate(response, data);
}

function validateRequestBody(operationId, data) {
  var operation = operationHash[operationId];
  var requestBody = operation ? operation.requestBody : {};
  return validate(requestBody, data);
}

<% paths.forEach(({ funcName, name }) => { %>
var <%= funcName %> = {
  response: function response(data) {
    return validateResponse('<%= name %>', data);
  },
  requestBody: function requestBody(data) {
    return validateRequestBody('<%= name %>', data);
  },
  parameters: function parameters(data) {
    return validateParameters('<%= name %>', data);
  }
};
<% }); %>
module.exports = {
<%_ paths.forEach(({ funcName }) => { _%>
  <%= funcName %>: <%= funcName %>,
<%_ }); _%>
}
